/*
 * @flow
 */

declare module "redux-reqseq" {

  declare type SequenceActionType =
    | 'REQUEST'
    | 'SUCCESS'
    | 'FAILURE'
    | 'FINALLY';

  declare export type SequenceAction = {
    +id :string;
    +type :string;
    value :any;
  };

  declare type SubReducers = {
    REQUEST ?:() => any;
    SUCCESS ?:() => any;
    FAILURE ?:() => any;
    FINALLY ?:() => any;
  };

  declare type SequenceActionCreator = (...args :any[]) => SequenceAction;
  declare type SequenceReducer = (state :any, action :SequenceAction, subReducers :SubReducers) => any;
  declare type SwitchCaseMatcher = (type :string) => string;

  declare export type RequestSequence = {
    REQUEST :'REQUEST';
    SUCCESS :'SUCCESS';
    FAILURE :'FAILURE';
    FINALLY :'FINALLY';
    (...args :any[]) :SequenceAction;
    request :SequenceActionCreator;
    success :SequenceActionCreator;
    failure :SequenceActionCreator;
    finally :SequenceActionCreator;
    baseType :string;
    case :SwitchCaseMatcher;
    reducer :SequenceReducer;
  };

  declare export var RequestStates :{|
    STANDBY :'STANDBY';
    PENDING :'PENDING';
    SUCCESS :'SUCCESS';
    FAILURE :'FAILURE';
  |};
  declare export type RequestState = $Values<typeof RequestStates>;

  declare export function newRequestSequence(baseType :string) :RequestSequence;
  declare export var version :string;

  declare export default {
    RequestStates :typeof RequestStates;
    newRequestSequence :typeof newRequestSequence;
    version :string;
  };
};
